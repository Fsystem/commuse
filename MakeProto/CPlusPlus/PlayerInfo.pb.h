// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerInfo.proto

#ifndef PROTOBUF_PlayerInfo_2eproto__INCLUDED
#define PROTOBUF_PlayerInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerInfo_2eproto();
void protobuf_AssignDesc_PlayerInfo_2eproto();
void protobuf_ShutdownFile_PlayerInfo_2eproto();

class PlayerInfo;

// ===================================================================

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();
  
  PlayerInfo(const PlayerInfo& from);
  
  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();
  
  void Swap(PlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string TypeName = 1 [default = "PlayerInfo"];
  inline bool has_typename_() const;
  inline void clear_typename_();
  static const int kTypeNameFieldNumber = 1;
  inline const ::std::string& typename_() const;
  inline void set_typename_(const ::std::string& value);
  inline void set_typename_(const char* value);
  inline void set_typename_(const char* value, size_t size);
  inline ::std::string* mutable_typename_();
  inline ::std::string* release_typename_();
  
  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string Email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  
  // optional int32 CheckSum = 4;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kCheckSumFieldNumber = 4;
  inline ::google::protobuf::int32 checksum() const;
  inline void set_checksum(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PlayerInfo)
 private:
  inline void set_has_typename_();
  inline void clear_has_typename_();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* typename__;
  static const ::std::string _default_typename__;
  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::int32 checksum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_PlayerInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerInfo

// required string TypeName = 1 [default = "PlayerInfo"];
inline bool PlayerInfo::has_typename_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_typename_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_typename_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_typename_() {
  if (typename__ != &_default_typename__) {
    typename__->assign(_default_typename__);
  }
  clear_has_typename_();
}
inline const ::std::string& PlayerInfo::typename_() const {
  return *typename__;
}
inline void PlayerInfo::set_typename_(const ::std::string& value) {
  set_has_typename_();
  if (typename__ == &_default_typename__) {
    typename__ = new ::std::string;
  }
  typename__->assign(value);
}
inline void PlayerInfo::set_typename_(const char* value) {
  set_has_typename_();
  if (typename__ == &_default_typename__) {
    typename__ = new ::std::string;
  }
  typename__->assign(value);
}
inline void PlayerInfo::set_typename_(const char* value, size_t size) {
  set_has_typename_();
  if (typename__ == &_default_typename__) {
    typename__ = new ::std::string;
  }
  typename__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_typename_() {
  set_has_typename_();
  if (typename__ == &_default_typename__) {
    typename__ = new ::std::string(_default_typename__);
  }
  return typename__;
}
inline ::std::string* PlayerInfo::release_typename_() {
  clear_has_typename_();
  if (typename__ == &_default_typename__) {
    return NULL;
  } else {
    ::std::string* temp = typename__;
    typename__ = const_cast< ::std::string*>(&_default_typename__);
    return temp;
  }
}

// optional string Name = 2;
inline bool PlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerInfo::name() const {
  return *name_;
}
inline void PlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Email = 3;
inline bool PlayerInfo::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfo::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfo::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& PlayerInfo::email() const {
  return *email_;
}
inline void PlayerInfo::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void PlayerInfo::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void PlayerInfo::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* PlayerInfo::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 CheckSum = 4;
inline bool PlayerInfo::has_checksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfo::set_has_checksum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfo::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfo::clear_checksum() {
  checksum_ = 0;
  clear_has_checksum();
}
inline ::google::protobuf::int32 PlayerInfo::checksum() const {
  return checksum_;
}
inline void PlayerInfo::set_checksum(::google::protobuf::int32 value) {
  set_has_checksum();
  checksum_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerInfo_2eproto__INCLUDED
