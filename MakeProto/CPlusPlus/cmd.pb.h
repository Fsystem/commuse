// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd.proto

#ifndef PROTOBUF_cmd_2eproto__INCLUDED
#define PROTOBUF_cmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cmd_2eproto();
void protobuf_AssignDesc_cmd_2eproto();
void protobuf_ShutdownFile_cmd_2eproto();


enum CmdType {
  INVALID_CMD = 0
};
bool CmdType_IsValid(int value);
const CmdType CmdType_MIN = INVALID_CMD;
const CmdType CmdType_MAX = INVALID_CMD;
const int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdType_descriptor();
inline const ::std::string& CmdType_Name(CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdType_descriptor(), value);
}
inline bool CmdType_Parse(
    const ::std::string& name, CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
enum MainCmd {
  GM_LOGIN = 1,
  GM_WORLD = 2,
  GM_GAME = 3
};
bool MainCmd_IsValid(int value);
const MainCmd MainCmd_MIN = GM_LOGIN;
const MainCmd MainCmd_MAX = GM_GAME;
const int MainCmd_ARRAYSIZE = MainCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* MainCmd_descriptor();
inline const ::std::string& MainCmd_Name(MainCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    MainCmd_descriptor(), value);
}
inline bool MainCmd_Parse(
    const ::std::string& name, MainCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MainCmd>(
    MainCmd_descriptor(), name, value);
}
enum SubCmdLogin {
  SUB_LOGIN = 1,
  SUB_LOGINOK = 2,
  SUB_LOGINFAID = 2
};
bool SubCmdLogin_IsValid(int value);
const SubCmdLogin SubCmdLogin_MIN = SUB_LOGIN;
const SubCmdLogin SubCmdLogin_MAX = SUB_LOGINOK;
const int SubCmdLogin_ARRAYSIZE = SubCmdLogin_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubCmdLogin_descriptor();
inline const ::std::string& SubCmdLogin_Name(SubCmdLogin value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubCmdLogin_descriptor(), value);
}
inline bool SubCmdLogin_Parse(
    const ::std::string& name, SubCmdLogin* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubCmdLogin>(
    SubCmdLogin_descriptor(), name, value);
}
enum SubCmdWorld {
  SUB_USERINFO = 1,
  SUB_USERINFOOK = 2,
  SUB_USERINFOFAID = 3
};
bool SubCmdWorld_IsValid(int value);
const SubCmdWorld SubCmdWorld_MIN = SUB_USERINFO;
const SubCmdWorld SubCmdWorld_MAX = SUB_USERINFOFAID;
const int SubCmdWorld_ARRAYSIZE = SubCmdWorld_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubCmdWorld_descriptor();
inline const ::std::string& SubCmdWorld_Name(SubCmdWorld value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubCmdWorld_descriptor(), value);
}
inline bool SubCmdWorld_Parse(
    const ::std::string& name, SubCmdWorld* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubCmdWorld>(
    SubCmdWorld_descriptor(), name, value);
}
enum SubCmdGame {
  SUB_SHOOT = 1
};
bool SubCmdGame_IsValid(int value);
const SubCmdGame SubCmdGame_MIN = SUB_SHOOT;
const SubCmdGame SubCmdGame_MAX = SUB_SHOOT;
const int SubCmdGame_ARRAYSIZE = SubCmdGame_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubCmdGame_descriptor();
inline const ::std::string& SubCmdGame_Name(SubCmdGame value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubCmdGame_descriptor(), value);
}
inline bool SubCmdGame_Parse(
    const ::std::string& name, SubCmdGame* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubCmdGame>(
    SubCmdGame_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< CmdType>() {
  return CmdType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< MainCmd>() {
  return MainCmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< SubCmdLogin>() {
  return SubCmdLogin_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< SubCmdWorld>() {
  return SubCmdWorld_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< SubCmdGame>() {
  return SubCmdGame_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2eproto__INCLUDED
