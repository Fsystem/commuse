// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Proto {
  
  public static partial class Common {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Common__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Common, global::Common.Builder> internal__static_Common__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Common() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgxDb21tb24ucHJvdG8iHAoGQ29tbW9uEhIKCFR5cGVOYW1lGAEgAigJOgA=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Common__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Common__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Common, global::Common.Builder>(internal__static_Common__Descriptor,
                new string[] { "TypeName", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
}
#region Messages
public sealed partial class Common : pb::GeneratedMessage<Common, Common.Builder> {
  private static readonly Common defaultInstance = new Builder().BuildPartial();
  public static Common DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Common DefaultInstanceForType {
    get { return defaultInstance; }
  }
  
  protected override Common ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Common.internal__static_Common__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Common, Common.Builder> InternalFieldAccessors {
    get { return global::Proto.Common.internal__static_Common__FieldAccessorTable; }
  }
  
  public const int TypeNameFieldNumber = 1;
  private bool hasTypeName;
  private string typeName_ = "";
  public bool HasTypeName {
    get { return hasTypeName; }
  }
  public string TypeName {
    get { return typeName_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTypeName) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::CodedOutputStream output) {
    int size = SerializedSize;
    if (HasTypeName) {
      output.WriteString(1, TypeName);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (HasTypeName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, TypeName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static Common ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Common ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Common ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Common ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Common ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Common ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Common ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Common ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Common ParseFrom(pb::CodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Common ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Common prototype) {
    return (Builder) new Builder().MergeFrom(prototype);
  }
  
  public sealed partial class Builder : pb::GeneratedBuilder<Common, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {}
    
    Common result = new Common();
    
    protected override Common MessageBeingBuilt {
      get { return result; }
    }
    
    public override Builder Clear() {
      result = new Common();
      return this;
    }
    
    public override Builder Clone() {
      return new Builder().MergeFrom(result);
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Common.Descriptor; }
    }
    
    public override Common DefaultInstanceForType {
      get { return global::Common.DefaultInstance; }
    }
    
    public override Common BuildPartial() {
      if (result == null) {
        throw new global::System.InvalidOperationException("build() has already been called on this Builder");
      }
      Common returnMe = result;
      result = null;
      return returnMe;
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Common) {
        return MergeFrom((Common) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Common other) {
      if (other == global::Common.DefaultInstance) return this;
      if (other.HasTypeName) {
        TypeName = other.TypeName;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::CodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      pb::UnknownFieldSet.Builder unknownFields = null;
      while (true) {
        uint tag = input.ReadTag();
        switch (tag) {
          case 0: {
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag);
            break;
          }
          case 10: {
            TypeName = input.ReadString();
            break;
          }
        }
      }
    }
    
    
    public bool HasTypeName {
      get { return result.HasTypeName; }
    }
    public string TypeName {
      get { return result.TypeName; }
      set { SetTypeName(value); }
    }
    public Builder SetTypeName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      result.hasTypeName = true;
      result.typeName_ = value;
      return this;
    }
    public Builder ClearTypeName() {
      result.hasTypeName = false;
      result.typeName_ = "";
      return this;
    }
  }
  static Common() {
    object.ReferenceEquals(global::Proto.Common.Descriptor, null);
  }
}

#endregion

